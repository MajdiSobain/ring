.. index:: 
	single: What is new in Ring 1.22; Introduction

========================
What is new in Ring 1.22
========================

In this chapter we will learn about the changes and new features in Ring 1.22 release.

.. index:: 
	pair: What is new in Ring 1.22?; List of changes and new features

List of changes and new features
================================

Ring 1.22 comes with the next features!

* Research Paper
* Better Applications
* Better Samples
* Better Functions
* Better RingFastPro Extension
* Return Attribute by Reference
* Better Compiler
* More Improvements

.. index:: 
	pair: What is new in Ring 1.22?; Research Paper

Research Paper
==============

URL: https://doi.org/10.3390/electronics13234627

Title: Ring: A Lightweight and Versatile Cross-Platform Dynamic Programming Language Developed Using Visual Programming

Abstract: New programming languages are often designed to keep up with technological advancements and project requirements while also learning from previous attempts and introducing more powerful expression mechanisms. However, most existing dynamic programming languages rely on English keywords and lack features that facilitate easy translation of language syntax. Additionally, maintaining multiple implementations of the same language for different platforms, such as desktops and microcontrollers, can lead to inconsistencies and fragmented features. Furthermore, they usually do not use visual programming to fully implement the compiler and virtual machine. In this research paper, we introduce Ringâ€”a dynamically-typed language with a lightweight implementation. However, it boasts several advantages, including a rich and versatile standard library and direct support for classes and object-oriented programming. The Ring language offers customization features. For instance, it allows easy modification of the language syntax multiple times, enabling programming by writing code using Arabic, English, or other keywords. Additionally, the language permits the creation of domain-specific languages through new features that extend object-oriented programming, allowing for specialized languages resembling CSS or Supernova. In the era of the Internet of Things, instead of creating another language implementation to support microcontrollers, the same Ring implementation allows us to create projects and applications for desktops, the web, WebAssembly, Android, or Raspberry Pi Pico. The Ring Compiler and Virtual Machine are designed using the PWCT Visual Programming language based on ANSI C. The visual implementation is composed of 18,945 components that generate 24,743 lines of code, which increases the abstraction level by approximately 23.5% and hides unnecessary details.

.. index:: 
	pair: What is new in Ring 1.22?; Better Applications

Better Applications
===================

* Programming Without Coding Technology 2.0 - Free Software (Steam Platform)
* Ring syntax highlighting for Sublime Text 4 (GitHub project)
* GitHub Action - Build Ring Project (GitHub project)
* DirSize - Directory Size Analyzer (GitHub project)
* EpochTime application (ring/applications folder)

.. index:: 
	pair: What is new in Ring 1.22?; Better Samples

Better Samples
==============

.. image:: hearteq.png
	:alt: Heart Equation

The next samples are added:

* samples/UsingJSONLib/test11.ring
* samples/General/TriangleLib/TriangleLibrary.ring
* samples/Drawing/HeartEquation/HeartEquation.ring
* samples/Language/ChangeSyntax/swapkeywordandoperator.ring
* samples/ProblemSolving/GetQuotesHistory/Curl-YahooHistory-JSON.ring
* samples/UsingStbImage/test15.ring - Fast Animation (1024x768 image - Over 60 FPS)
* samples/UsingBingChat/examples/chat13.ring
* samples/UsingFastPro/test2.ring
* samples/UsingFastPro/test3.ring
* samples/UsingFastPro/test4.ring
* samples/UsingFastPro/test5.ring
* samples/UsingFastPro/test6.ring

The next applications and samples are revised:

* samples/UsingStbImage/test12.ring
* samples/UsingStbImage/test15.ring
* tools/tryringonline/samples.ring
* Sokoban - Code Format.
* HoursCounter - User Interface.
* GetQuotesHistory - Better implementation.
* GoldMagic800 - Draw background based on level number.

.. image:: newgm800image.png
	:alt: GoldMagic800

.. index:: 
	pair: What is new in Ring 1.22?; Better Functions

Better Functions
================

* StdLib - Split() function - Better implementation.
* StdLib - OSCopyFile() function - Better support for Linux.
* StdLib - OSCopyFolder() function - Better support for Linux. 
* StdLib - Factorial() function - Better performance.
* StdLib - Fibonacci() function - Better performance.
* RingQt - QString Class - Added: size()/length() methods. 
* ringvm_calllist() function - Added the parameters count and the line number to the output.

Example:

The next Ring code defines a SumRows class that processes and sums rows of numbers given within
curly braces. The braceExprEval() method evaluates each value, updating the sum for the current
row and printing the sum when the row changes. 
The braceEnd() method prints the sum of the last row.

.. code-block:: ring

	new SumRows {
		10 20 30		# 60
		10			# 10
		400 100			# 500
		30 40			# 70
	}

	class SumRows

		nSum     = 0
		nLastRow = 0

		func braceExprEval  value 

			aCallList = ringvm_calllist()
			nLine     = aCallList[len(aCallList)-1][7]

			if nLastRow  = 0      nLastRow = nLine            nSum = value return ok
			if nLastRow != nLine  nLastRow = nLine   ? nSum   nSum = value return ok

			nSum += value 

		func braceEnd 
		
			? nSum 


.. index:: 
	pair: What is new in Ring 1.22?; Better Ring FastPro Extension

Better RingFastPro Extension
============================

* The build script is revised to use the ring/lib directory.
* updateList()/updateColumn() functions - Support Serial/Pow/Rem options.

Example:

The code begins by loading the RingFastPro extension and initializing a 5x5 list called aList. 
It then updates this list with values incremented by 5 in each column. 
After printing a row of 20 asterisks, the code iterates through the list, printing each element 
with hyphens between them, except for the last element in each row. 

.. code-block:: ring

	load "fastpro.ring"

	aList = [
		list(5),
		list(5),
		list(5),
		list(5),
		list(5)
	]

	updateList(aList,:serial,:col,1,0)
	updateList(aList,:serial,:col,2,5)
	updateList(aList,:serial,:col,3,10)
	updateList(aList,:serial,:col,4,15)
	updateList(aList,:serial,:col,5,20)

	? copy("*",20)

	for x=1 to 5
		for y=1 to 5
			print(aList[x][y])
			if y != 5 print ("-") ok
		next
		? ""
	next

Output:

The output displays a row of asterisks followed by the elements of the list arranged 
in a structured format.

.. code-block:: none

	********************
	1-6-11-16-21
	2-7-12-17-22
	3-8-13-18-23
	4-9-14-19-24
	5-10-15-20-25


.. index:: 
	pair: What is new in Ring  1.22; Return Attribute by Reference

Return Attribute by Reference
=============================

In early Ring releases, returning an attribute that contains a List/Object would return a shared reference to this List/Object. This release supports advanced cases for using this feature, allowing nested method calls before returning the List/Object.

.. note:: For advanced usage of references with full customization, refer to the 'Using References' chapter, which explains the Ref()/Reference() function.

Example:

.. code-block:: ring

	o = new myclass

	o.getObject().x = 1000
	o.getObject().y = 2000
	o.getObject().z = 3000

	? o.aList


	class myclass

		aList = [ new point {x=10  y=20  z=30 },
			  new point {x=100 y=200 z=300}  ]

		func getObject
			return myMethod()

		func myMethod
			return aList[myIndex()]
	
		func myIndex
			return 2

	class point x y z

Output:

.. code-block:: none

	x: 10
	y: 20
	z: 30
	x: 1000
	y: 2000
	z: 3000

.. index:: 
	pair: What is new in Ring 1.22?; Better Compiler

Better Compiler
===============

* Lists - Support trailing comma.
* Support (+) operator before numbers.
* Logical AND have higher precedence than Logical OR.

Example:

.. code-block:: ring

	aList = ["one",
		 "two",
		 "three",
		]

	nNum1 = +10
	nNum2 = -10

	lRes  = True OR False AND False
	lRes2 = True || False &&  False

	? aList
	? nNum1
	? nNum2
	? lRes
	? lRes2

Output:

.. code-block:: none

	one
	two
	three

	10
	-10
	1 		# True	
	1 		# True

.. index:: 
	pair: What is new in Ring  1.22; More Improvements

More Improvements
=================

* Better documentation - Chapter: Program Structure.
* Better vscode extension - Ring build system and snippets.
* Better RingQt for Android/WebAssembly - RING_API_REGISTER usage is revised. 
* Output the RingPDFGen library to the ring/lib directory and install it accordingly.
* File: buildgccstatic.sh - Make the Ring executable fully static.
* File: marketing/presentation/Ring.pptx - Use https in the website URL.
* File: language/CMakeLists.txt - Use /etc/os-release to get the Distro name.
* Ring Compiler/VM source code - Revise exit() function usage.
* Ring Compiler/VM source code - language/src/stmt.c - Revise comments.
* Ring Compiler/VM source code - language/src/vm.c - Organize the instructions.
* Ring Compiler/VM source code - List structure - Rename members (Use shorter names).
* Ring Visual Source - Added: language/visualsrc/ring_hashlib.ssf

